generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views", "multiSchema", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas = ["juicebox"]
}

view Project {
  chainId                   Int     @map("chain_id")
  createdAt                 Int     @map("created_at")
  projectId                 Int     @map("project_id")
  paymentsCount             Int     @default(0) @map("payments_count")
  balance                   Decimal  @default(0)
  isRevnet                  Boolean @map("is_revnet")
  deployer                  String  @db.VarChar(42)
  owner                     String  @db.VarChar(42)
  erc20                     String? @db.VarChar(42)
  erc20Supply               Decimal  @default(0) @map("erc20_supply")
  erc20Name                 String? @map("erc20_name")
  erc20Symbol               String? @map("erc20_symbol")
  cashoutA                  Decimal  @default(0) @map("cashout_a")
  cashoutB                  Decimal  @default(0) @map("cashout_b")
  currentRulesetId          BigInt  @default(0) @map("current_ruleset_id")
  contributorsCount         Int     @default(0) @map("contributors_count")
  redeemCount               Int     @default(0) @map("redeem_count")
  redeemVolume              Decimal  @default(0) @map("redeem_volume")
  pendingReservedTokens     Decimal  @default(0) @map("pending_reserved_tokens")
  metadataUri               String? @map("metadata_uri")
  metadata                  Json?
  name                      String?
  infoUri                   String? @map("info_uri")
  logoUri                   String? @map("logo_uri")
  coverImageUri             String? @map("cover_image_uri")
  twitter                   String?
  discord                   String?
  telegram                  String?
  tokens                    String[]
  domain                    String?
  description               String?
  tags                      String[]
  projectTagline            String? @map("project_tagline")
  suckerGroupId             String? @map("sucker_group_id")

  participants Participant[]
  rulesets     Ruleset[]
  loans        Loan[]

  @@id([chainId, projectId])
  @@index([projectId])
  @@map("project")
  @@schema("juicebox")
}

view SuckerGroup {
  id        String   @id
  projects  String[]
  addresses String[] @db.VarChar(42)
  createdAt Int      @map("created_at")

  @@map("sucker_group")
  @@schema("juicebox")
}

view Participant {
  chainId      Int     @map("chain_id")
  projectId    Int     @map("project_id")
  createdAt    Int     @map("created_at")
  balance      Decimal  @default(0)
  isRevnet     Boolean? @map("is_revnet")
  address      String  @db.VarChar(42)
  firstOwned   Int?    @map("first_owned")
  cashOutValue Decimal  @default(0) @map("cash_out_value")

  project Project @relation(fields: [chainId, projectId], references: [chainId, projectId])

  @@id([chainId, projectId, address])
  @@index([address])
  @@index([chainId, projectId])
  @@map("participant")
  @@schema("juicebox")
}

view Ruleset {
  chainId                        Int     @map("chain_id")
  projectId                      Int     @map("project_id")
  rulesetId                      BigInt  @map("ruleset_id")
  createdAt                      Int     @map("created_at")
  queuedAt                       Int     @map("queued_at")
  cycleNumber                    Int     @map("cycle_number")
  basedOnId                      BigInt  @map("based_on_id")
  start                          BigInt
  duration                       BigInt
  weight                         Decimal
  weightCutPercent               Int     @map("weight_cut_percent")
  approvalHook                   String? @db.VarChar(42) @map("approval_hook")
  reservedPercent                Int     @map("reserved_percent")
  cashOutTaxRate                 Int     @map("cash_out_tax_rate")
  baseCurrency                   Int     @map("base_currency")
  pausePay                       Boolean @map("pause_pay")
  pauseCreditTransfers           Boolean @map("pause_credit_transfers")
  allowOwnerMinting              Boolean @map("allow_owner_minting")
  allowSetCustomToken            Boolean @map("allow_set_custom_token")
  allowTerminalMigration         Boolean @map("allow_terminal_migration")
  allowSetTerminals              Boolean @map("allow_set_terminals")
  allowSetController             Boolean @map("allow_set_controller")
  allowAddAccountingContext      Boolean @map("allow_add_accounting_context")
  allowAddPriceFeed              Boolean @map("allow_add_price_feed")
  ownerMustSendPayouts           Boolean @map("owner_must_send_payouts")
  holdFees                       Boolean @map("hold_fees")
  useTotalSurplusForCashOuts     Boolean @map("use_total_surplus_for_cash_outs")
  useDataHookForPay              Boolean @map("use_data_hook_for_pay")
  useDataHookForCashOut          Boolean @map("use_data_hook_for_cash_out")
  dataHook                       String? @db.VarChar(42) @map("data_hook")
  metadata                       BigInt
  metadataExtra                  Int?    @map("metadata_extra")
  mustStartAtOrAfter             BigInt? @map("must_start_at_or_after")
  caller                         String  @db.VarChar(42)
  approvalStatus                 String? @map("approval_status")

  project Project @relation(fields: [chainId, projectId], references: [chainId, projectId])

  @@id([chainId, projectId, rulesetId])
  @@index([projectId])
  @@index([rulesetId])
  @@index([start])
  @@map("ruleset")
  @@schema("juicebox")
}

// Loan tables for borrowable amount calculations
view Loan {
  id                BigInt  @map("id")
  chainId           Int     @map("chain_id")
  projectId         Int     @map("project_id")
  createdAt         Int     @map("created_at")
  borrowAmount      BigInt  @map("borrow_amount")
  collateral        BigInt  @map("collateral")
  sourceFeeAmount   BigInt  @map("source_fee_amount")
  prepaidDuration   Int     @map("prepaid_duration")
  prepaidFeePercent Int     @map("prepaid_fee_percent")
  beneficiary       String  @db.VarChar(42)
  owner             String  @db.VarChar(42)
  token             String  @db.VarChar(42)
  terminal          String  @db.VarChar(42)
  tokenUri          String? @map("token_uri")

  project Project @relation(fields: [chainId, projectId], references: [chainId, projectId])

  @@id([id, chainId])
  @@index([owner])
  @@index([projectId])
  @@map("loan")
  @@schema("juicebox")
}
